import random

import pygame as pg

#init() необходима для инициации всех модулей библиотеки pygame.
pg.init()
size=(500,500)
screen=pg.display.set_mode(size)
pg.display.set_caption("window")
#количество кадров
fps=15
#объект часов чтобы за ними следить и ограничивать
#объект для контроля количества кадров.
clock=pg.time.Clock()

runGame = True  # флаг выхода из цикла игры
while runGame:
    # События будем брать из функции pygame.event.get()
    # Эта функция позволяет разработчику получать доступ ко всем событиям,
    # происходящим в приложении. pygame.event.get() предназначена для извлечения всех событий,
    # накопленных с момента последнего вызова этой функции. Она возвращает список объектов-событий,
    # каждый из которых представляет собой отдельное действие, совершенное пользователем или системой.
    # К таким действиям относятся нажатия клавиш, щелчки мышью, перемещения курсора,
    # а также системные события, такие как закрытие окна программы.
    # Эта функция не принимает никаких аргументов и всегда возвращает список объектов-событий.
    # Если событий нет, возвращается пустой список.

    # pygame.QUIT Тип события - закрытие окна
    for event in pg.event.get():
        if event.type == pg.QUIT:
            runGame = False

    # говорит что нужно отрисовать R красный G зеленый B синий
    # 0<номер цвета<255
    # сайт цветов www.w3schools.com
    # screen.fill() — метод, который заливает фон одним цветом.
    # Функция pg.display.flip() используется, чтобы изменения стали видны.
    r=random.randint(0,255)
    screen.fill(pg.Color(r, 129, 158))
    #pygame.display.flip() Обновить всю поверхность отображения на экране .
    pg.display.flip()
    #Сколько кадров в секунду показать
    #метод, ограничивающий FPS
    clock.tick(fps)
# quit() запускает код, который деактивирует библиотеку Pygame
#
pg.quit()